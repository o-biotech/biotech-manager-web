// // deno-lint-ignore-file
// import { computed, signal } from "@preact/signals";
// import { EventEmitter } from "node:events";
// import { isObject } from "../src.deps.ts";

// export class StateFlowProxyHandler {
//   //# Fields
//   private static proxies = new WeakSet();

//   protected objToProxies = new WeakMap();

//   protected proxyToSignals = new WeakMap();
//   //#

//   //# Constructors
//   constructor() {
//   }
//   //#

//   //# Static
//   public static CreateProxy<TState extends object>(
//     target: TState,
//     handlers: ProxyHandler<object>,
//   ): TState {
//     const proxy = new Proxy(target, handlers);

//     this.proxies.add(proxy);

//     return proxy as TState;
//   }
//   //#

//   //# API Methods
//   public apply(target: any, thisArg: any, argArray: any[]): any {
//     return Reflect.apply(target, thisArg, argArray);
//   }

//   public get(target: any, prop: PropertyKey, receiver: unknown) {
//     const signals = this.retrieveSignalForProxy(receiver);

//     if (
//       !signals.has(prop) &&
//       typeof Object.getOwnPropertyDescriptor(target, prop)?.get === "function"
//     ) {
//       signals.set(prop, computed(() => Reflect.get(target, prop, receiver)));
//     } else {
//       let value = Reflect.get(target, prop, receiver);

//       if (!signals.has(prop)) {
//         if (isObject(target)) {
//           if (!this.objToProxies.has(value)) {
//             this.objToProxies.set(
//               target,
//               StateFlowProxyHandler.CreateProxy(value, this),
//             );
//           }

//           value = this.objToProxies.get(target);
//         }

//         signals.set(prop, signal(value));
//       }
//     }

//     return signals.get(prop);
//   }

//   public set(
//     target: any,
//     prop: string | symbol,
//     newValue: any,
//     receiver: any,
//   ): boolean {
//     const signals = this.retrieveSignalForProxy(receiver);

//     let internal = newValue;

//     if (isObject(newValue)) {
//       if (!this.objToProxies.has(newValue)) {
//         this.objToProxies.set(
//           target,
//           StateFlowProxyHandler.CreateProxy(newValue, this),
//         );
//       }

//       internal = this.objToProxies.get(target);
//     }

//     const result = Reflect.set(target, prop, newValue, receiver);

//     if (!signals.has(prop)) {
//       signals.set(prop, signal(internal));
//     } else {
//       signals.get(prop).value = internal;
//     }

//     return result;
//   }
//   //#

//   //# Helpers
//   protected retrieveSignalForProxy(reciever: any) {
//     if (!this.proxyToSignals.has(reciever)) {
//       this.proxyToSignals.set(reciever, new Map());
//     }

//     return this.proxyToSignals.get(reciever);
//   }
//   //#
// }

// export class StateFlowContextService<TState extends object>
//   extends EventEmitter {
//   //# Fields
//   //#

//   //# Properties
//   public State!: TState;
//   //#

//   //# Constructors
//   constructor(initState: TState) {
//     super();

//     this.State = StateFlowProxyHandler.CreateProxy(
//       initState,
//       new StateFlowProxyHandler(),
//     );
//   }
//   //#

//   //# API Methods
//   public $Draft(recipe: (draft: TState) => void): void {
//     recipe(this.State);

//     // mergeDeep(this.State, state);

//     this.emitStateChanged();
//   }
//   //#

//   //# Helpers
//   protected emitStateChanged(): void {
//     const state = this.revertState();

//     this.emit("StateChanged", state);
//   }

//   protected revertState(): TState {
//     return { ...this.State } as TState;
//     // return Object.assign(
//     //   {},
//     //   this.State as RevertDeepSignal<typeof this.State>,
//     // ) as TState;
//   }
//   //#
// }


import { JSX } from "preact";
import { classSet } from "../src.deps.ts";

export type LogoProps = JSX.HTMLAttributes<HTMLImageElement>;

export function Logo(props: LogoProps): JSX.Element {
  return (
    <img
      src="https://site-assets.plasmic.app/fd4e055b222749c879c6e042881ad65e.svg"
      width="128"
      height="128"
      alt="the Fresh logo: a sliced lemon dripping with juice"
      {...props}
    />
  ) // class={classSet(props, "my-6")}
  ;
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet } from "../../src.deps.ts";

export type CloudConnectAzureFormProps = {
  actionText?: string;

  description?: string;

  title?: string;
} & Omit<JSX.HTMLAttributes<HTMLFormElement>, "title">;

export function CloudConnectAzureForm(props: CloudConnectAzureFormProps) {
  const title = props.title || "Connect to Azure";

  const description = props.description ||
    "To get started in the cloud, please connect your Azure account.";

  const actionText = props.actionText || "Connect Now";

  return (
    <form
      action="/cloud/azure/auth/signin"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl">
            {title}
          </label>

          <p class="text-lg">{description}</p>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {actionText}
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Subscription } from "npm:@azure/arm-subscriptions";
import { Action, ActionGroup, classSet } from "../../src.deps.ts";

export type CloudConnectExistingFormProps = {
  actionText?: string;

  subs: Subscription[];

  title?: string;
} & Omit<JSX.HTMLAttributes<HTMLFormElement>, "title">;

export function CloudConnectExistingForm(props: CloudConnectExistingFormProps) {
  const actionText = props.actionText || "Connect Subscription";

  const title = props.title || "Existing Subscription";

  return (
    <form
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label
            for="subscription-id"
            class="block uppercase tracking-wide font-bold mb-2 text-xl"
          >
            {title}
          </label>

          <select
            id="subscription-id"
            name="subscription-id"
            required
            class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded-lg shadow-sm focus:outline-none focus:shadow-lg focus:border-blue-500 placeholder-gray-500"
          >
            <option value="">-- Select an existing subscription --</option>

            {props.subs.map((sub) => {
              return (
                <option value={sub.subscriptionId}>{sub.displayName}</option>
              );
            })}
          </select>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {actionText}
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Location } from "npm:@azure/arm-subscriptions";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type CloudCALZFormProps = JSX.HTMLAttributes<HTMLFormElement> & {
  cloudLookup: string;

  locations: Location[];

  resGroupLookup?: string;
};

export function CloudCALZForm(props: CloudCALZFormProps) {
  return (
    <form
      method="post"
      action="/api/eac/clouds/resource-groups"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:p-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4 text-left">
        <Input
          id="cloudLookup"
          name="cloudLookup"
          type="hidden"
          value={props.cloudLookup}
        />

        <div class="w-full px-3">
          <label
            for="resGroupLookup"
            class="block uppercase tracking-wide font-bold mb-2 text-xl"
          >
            Resource Group Lookup
          </label>

          <Input
            id="resGroupLookup"
            name="resGroupLookup"
            type="text"
            required
            disabled={!!props.resGroupLookup}
            placeholder="Enter new resource group lookup"
            class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="w-full p-3">
          <label
            for="description"
            class="block uppercase tracking-wide font-bold mb-2 text-xl"
          >
            Description
          </label>

          <Input
            id="description"
            name="description"
            type="text"
            required
            multiline
            placeholder="Enter new resource group description"
            class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
          />
        </div>

        <div class="w-full px-3">
          <label
            for="location"
            class="block uppercase tracking-wide font-bold mb-2 text-xl"
          >
            Location
          </label>

          <select
            id="location"
            name="location"
            required
            class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded-lg shadow-sm focus:outline-none focus:shadow-lg focus:border-blue-500 placeholder-gray-500"
          >
            <option value="">-- Select a location --</option>

            {props.locations.map((location) => {
              return (
                <option value={location.name}>{location.displayName}</option>
              );
            })}
          </select>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            Create CALZ
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type EaCManageCloudFormProps = JSX.HTMLAttributes<HTMLFormElement> & {
  cloudApplicationID?: string;
  cloudAuthKey?: string;
  cloudDescription?: string;
  cloudLookup?: string;
  cloudName?: string;
  cloudSubscriptionID?: string;
  cloudTenantID?: string;
  entLookup?: string;
};

export function EaCManageCloudForm(props: EaCManageCloudFormProps) {
  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label
            for="subscription-plan"
            class="block uppercase tracking-wide font-bold mb-2 text-xl"
          >
            Cloud Connection
          </label>

          <p class="block text-md mb-8">
            Use the Fathym CLI to easily create and configure an Azure cloud
            connection with a new managed subscription or existing subscription
            from your account. Using NPM, call the{" "}
            <span class="font-bold bg-slate-300 px-1">
              npx fathym eac env clouds azure generate
            </span>{" "}
            command and then copy in the values displayed to this form.
          </p>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <Input
            id="cloudLookup"
            name="cloudLookup"
            type="hidden"
            value={props.cloudLookup}
          />

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.cloudName || ""}
              required
              placeholder="Enter cloud name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.cloudDescription || ""}
              multiline
              required
              placeholder="Enter cloud description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="tenant-id"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Tenant ID
            </label>

            <Input
              id="tenant-id"
              name="tenant-id"
              type="text"
              value={props.cloudTenantID || ""}
              required
              placeholder="Enter tenant ID"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="subscription-id"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Subscription ID
            </label>

            <Input
              id="subscription-id"
              name="subscription-id"
              type="text"
              value={props.cloudSubscriptionID || ""}
              required
              placeholder="Enter subscription ID"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="application-id"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Application ID
            </label>

            <Input
              id="application-id"
              name="application-id"
              type="text"
              value={props.cloudApplicationID || ""}
              required
              placeholder="Enter application ID"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="auth-key"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Application Auth Key
            </label>

            <Input
              id="auth-key"
              name="auth-key"
              type="text"
              value={props.cloudAuthKey || ""}
              required
              placeholder="Enter application auth key"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            Connect Subscription
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type EaCManageDevOpsActionFormProps = {
  entLookup: string;
  doaLookup?: string;
  doaName?: string;
  doaDescription?: string;
  doaPath?: string;
  doaTemplatePaths?: string[];
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageDevOpsActionForm(
  props: EaCManageDevOpsActionFormProps,
) {
  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.doaLookup ? "Edit" : "Create"} EaC DevOps Actions
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <div class="w-full p-3">
            <label
              for="doaLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              DevOps Action Lookup
            </label>

            <Input
              id="doaLookup"
              name="doaLookup"
              type="text"
              value={props.doaLookup || ""}
              required
              placeholder="Enter EaC devops action lookup"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.doaName || ""}
              required
              placeholder="Enter EaC devops action name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.doaDescription || ""}
              multiline
              required
              placeholder="Enter EaC devops action description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="path"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Path
            </label>

            <p>Will be stored at path in the `.github/workflows` folder.</p>

            <Input
              id="path"
              name="path"
              type="text"
              value={props.doaPath || ""}
              required
              placeholder="Enter EaC devops action path"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="templatePaths"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Template Paths
            </label>

            <p>Put each template path on a new line.</p>

            <Input
              id="templatePaths"
              name="templatePaths"
              value={props.doaTemplatePaths?.join("\n") || ""}
              multiline
              required
              placeholder="Enter EaC devops action template paths"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.doaLookup ? "Save" : "Create"} EaC DevOps Action
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type EaCManageHandlerFormProps = {
  entLookup: string;
  handlerLookup?: string;
  handlerOrder?: number;
  handlerApiPath?: string;
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageHandlerForm(props: EaCManageHandlerFormProps) {
  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.handlerLookup ? "Edit" : "Create"} EaC Handler
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <div class="w-full p-3">
            <label
              for="handlerLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Handler Lookup
            </label>

            <Input
              id="handlerLookup"
              name="handlerLookup"
              type="text"
              value={props.handlerLookup || ""}
              required
              placeholder="Enter EaC handler lookup"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="apiPath"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              API Path
            </label>

            <Input
              id="apiPath"
              name="apiPath"
              type="url"
              value={props.handlerApiPath || ""}
              required
              placeholder="Enter EaC handler API Path"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="order"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Order
            </label>

            <Input
              id="order"
              name="order"
              type="text"
              value={props.handlerOrder || 100}
              required
              placeholder="Enter EaC handler order"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.handlerLookup ? "Save" : "Create"} EaC Handler
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type EaCManageIoTDeviceFormProps = {
  entLookup: string;
  iotLookup: string;
  deviceLookup?: string;
  deviceName?: string;
  deviceDescription?: string;
  deviceIsIoTEdge?: boolean;
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageIoTDeviceForm(props: EaCManageIoTDeviceFormProps) {
  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.deviceLookup ? "Edit" : "Create"} EaC IoT Device
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <Input
            id="iotLookup"
            name="iotLookup"
            type="hidden"
            value={props.iotLookup}
          />

          <div class="w-full p-3">
            <label
              for="deviceLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              IoT Device Lookup
            </label>

            <Input
              id="deviceLookup"
              name="deviceLookup"
              type="text"
              value={props.deviceLookup || ""}
              required
              placeholder="Enter EaC device lookup"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.deviceName || ""}
              required
              placeholder="Enter EaC device name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.deviceDescription || ""}
              multiline
              required
              placeholder="Enter EaC device description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            {
              /* <label class="block uppercase tracking-wide font-bold mb-2 text-xl">
            IoT Edge Device?
          </label> */
            }

            <div class="flex items-center mb-2">
              <Input
                id="isIoTEdge"
                name="isIoTEdge"
                type="checkbox"
                value="isIoTEdge"
                checked={props.deviceIsIoTEdge}
                class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
              />

              <label for="isIoTEdge" class="ms-2 text-sm font-medium pl-3">
                Is IoT Edge Device?
              </label>
            </div>
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.deviceLookup ? "Save" : "Create"} EaC IoT Device
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";
import { useState } from "preact/hooks";
import { DataLookup } from "../../utils/DataLookup.ts";

export type EaCManageIoTFormProps = {
  cloudOptions: DataLookup[];
  entLookup: string;
  resGroupOptions: {
    [cloudLookup: string]: DataLookup[];
  };
  iotLookup?: string;
  iotName?: string;
  iotDescription?: string;
  iotCloudLookup?: string;
  iotResGroupLookup?: string;
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageIoTForm(props: EaCManageIoTFormProps) {
  const [curCloudLookup, setCurCloudLookup] = useState(
    props.iotCloudLookup || "",
  );

  const cloudChanged = (e: JSX.TargetedEvent<HTMLSelectElement, Event>) => {
    setCurCloudLookup(e.currentTarget.value);
  };

  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["w-full max-w-sm md:max-w-md mx-auto py-3 mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.iotLookup ? "Edit" : "Create"} EaC IoT
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <div class="w-full p-3">
            <label
              for="iotLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              IoT Lookup
            </label>

            <Input
              id="iotLookup"
              name="iotLookup"
              type="text"
              value={props.iotLookup || ""}
              required
              placeholder="Enter EaC IoT lookup"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.iotName || ""}
              required
              placeholder="Enter EaC iot name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.iotDescription || ""}
              multiline
              required
              placeholder="Enter EaC iot description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="cloudLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Cloud
            </label>

            <select
              id="cloudLookup"
              name="cloudLookup"
              type="text"
              value={props.iotCloudLookup || ""}
              required
              onChange={cloudChanged}
              placeholder="Enter EaC IoT cloud"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            >
              <option value="">-- Select EaC cloud --</option>
              {props.cloudOptions.map((option) => {
                return <option value={option.Lookup}>{option.Name}</option>;
              })}
            </select>
          </div>

          <div class="w-full p-3">
            <label
              for="resGroupLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Resource Group
            </label>

            <select
              id="resGroupLookup"
              name="resGroupLookup"
              type="text"
              value={props.iotResGroupLookup || ""}
              disabled={!curCloudLookup}
              required
              placeholder="Enter EaC IoT resource group"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            >
              <option value="">-- Select EaC resource group --</option>
              {curCloudLookup &&
                props.resGroupOptions[curCloudLookup].map((option) => {
                  return <option value={option.Lookup}>{option.Name}</option>;
                })}
            </select>
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.iotLookup ? "Save" : "Create"} EaC IoT
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";
import { useEffect, useState } from "preact/hooks";
import { DataLookup } from "../../utils/DataLookup.ts";

export type EaCManageSecretFormProps = {
  cloudOptions: DataLookup[];
  entLookup: string;
  keyVaultOptions: {
    [cloudLookup: string]: DataLookup[];
  };
  secretLookup?: string;
  secretName?: string;
  secretDescription?: string;
  secretValue?: string;
  secretCloudLookup?: string;
  secretKeyVaultLookup?: string;
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageSecretForm(props: EaCManageSecretFormProps) {
  const [curCloudLookup, setCurCloudLookup] = useState(
    props.secretCloudLookup || "",
  );

  const cloudChanged = (e: JSX.TargetedEvent<HTMLSelectElement, Event>) => {
    setCurCloudLookup(e.currentTarget.value);
  };

  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.secretLookup ? "Edit" : "Create"} EaC Secrets
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          <div class="w-full p-3">
            <label
              for="secretLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Secret Lookup
            </label>

            <Input
              id="secretLookup"
              name="secretLookup"
              type="text"
              value={props.secretLookup || ""}
              required
              placeholder="Enter EaC secret lookup"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.secretName || ""}
              required
              placeholder="Enter EaC secret name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.secretDescription || ""}
              multiline
              required
              placeholder="Enter EaC secret description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="value"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Value
            </label>

            <Input
              id="value"
              name="value"
              type="text"
              value={props.secretValue || ""}
              multiline
              placeholder="Enter EaC secret value"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="cloudLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Cloud
            </label>

            <select
              id="cloudLookup"
              name="cloudLookup"
              type="text"
              value={props.secretCloudLookup || ""}
              required
              onChange={cloudChanged}
              placeholder="Enter EaC secret cloud"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            >
              <option value="">-- Select EaC cloud --</option>
              {props.cloudOptions.map((option) => {
                return <option value={option.Lookup}>{option.Name}</option>;
              })}
            </select>
          </div>

          <div class="w-full p-3">
            <label
              for="keyVaultLookup"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Key Vault
            </label>

            <select
              id="keyVaultLookup"
              name="keyVaultLookup"
              type="text"
              value={props.secretKeyVaultLookup || ""}
              disabled={!curCloudLookup}
              required
              placeholder="Enter EaC secret key vault"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            >
              <option value="">-- Select EaC key vault --</option>
              {curCloudLookup &&
                props.keyVaultOptions[curCloudLookup].map((option) => {
                  return <option value={option.Lookup}>{option.Name}</option>;
                })}
            </select>
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.secretLookup ? "Save" : "Create"} EaC Secret
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { useState } from "preact/hooks";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";
import { DataLookup } from "../../utils/DataLookup.ts";

export type EaCManageSourceFormProps = {
  entLookup: string;
  organizationOptions: string[];
  // repositoryOptions: {
  //   [cloudLookup: string]: string[];
  // };
  secretOptions: DataLookup[];
  sourceLookup?: string;
  sourceName?: string;
  sourceDescription?: string;
  sourceOrgnaization?: string;
  sourceRepository?: string;
  sourceSecrets?: DataLookup[];
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageSourceForm(props: EaCManageSourceFormProps) {
  const actionOptions: DataLookup[] = [
    {
      Lookup: "configure",
      Name: "Configure",
    },
    {
      Lookup: "fork",
      Name: "Fork",
    },
    // {
    //   Lookup: 'import',
    //   Name: 'Import',
    // },
    {
      Lookup: "template",
      Name: "Template",
    },
  ];

  const [curAction, setCurAction] = useState("");

  const [curOrg, setCurOrg] = useState(props.sourceOrgnaization || "");

  const actionChanged = (e: JSX.TargetedEvent<HTMLSelectElement, Event>) => {
    setCurAction(e.currentTarget.value);
  };

  const organizationChanged = (
    e: JSX.TargetedEvent<HTMLSelectElement, Event>,
  ) => {
    setCurOrg(e.currentTarget.value);
  };

  return (
    <form
      method="post"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label class="block uppercase tracking-wide font-bold mb-2 text-xl text-center">
            {props.sourceLookup ? "Manage" : "Create"} EaC Source
          </label>

          <Input
            id="entLookup"
            name="entLookup"
            type="hidden"
            value={props.entLookup}
          />

          {props.sourceLookup && (
            <label class="block uppercase tracking-wide font-bold mb-2 text-lg text-center">
              Source: {props.sourceOrgnaization}/{props.sourceRepository}
              <Input
                id="sourceLookup"
                name="sourceLookup"
                type="hidden"
                value={props.sourceLookup}
              />
              <Input
                id="org"
                name="org"
                type="hidden"
                value={props.sourceOrgnaization}
              />
              <Input
                id="repo"
                name="repo"
                type="hidden"
                value={props.sourceRepository}
              />
            </label>
          )}

          {!props.sourceLookup && (
            <div class="w-full p-3">
              <label
                for="action"
                class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
              >
                Source Action
              </label>

              <select
                id="action"
                name="action"
                type="text"
                required
                onChange={actionChanged}
                placeholder="Enter EaC IoT cloud"
                class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
              >
                <option value="">-- Select Source action --</option>
                {actionOptions.map((option) => {
                  return <option value={option.Lookup}>{option.Name}</option>;
                })}
              </select>
            </div>
          )}

          {curAction && curAction !== "configure" && !props.sourceLookup && (
            <div class="w-full p-3">
              <label
                for="remote"
                class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
              >
                {curAction === "fork"
                  ? "Repository to Fork"
                  : curAction === "template"
                  ? "Template Repository"
                  : "Import Repository"}
              </label>

              <Input
                id="remote"
                name="remote"
                type="url"
                required
                placeholder="Enter EaC remote repository"
                class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
              />
            </div>
          )}

          {!props.sourceLookup && (
            <>
              <div class="w-full p-3">
                <label
                  for="org"
                  class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
                >
                  Into Organization
                </label>

                <select
                  id="org"
                  name="org"
                  type="text"
                  value={curOrg || ""}
                  required
                  onChange={organizationChanged}
                  placeholder="Enter EaC source organization"
                  class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
                >
                  <option value="">-- Select GitHub organization --</option>
                  {props.organizationOptions.map((option) => {
                    return <option value={option}>{option}</option>;
                  })}
                </select>
              </div>

              {curAction && curAction != "fork" && (
                <div class="w-full p-3">
                  <label
                    for="repo"
                    class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
                  >
                    Repository
                  </label>

                  {
                    /* <select
                    id="repo"
                    name="repo"
                    type="text"
                    value={props.sourceRepository || ''}
                    disabled={!curOrg}
                    required
                    placeholder="Enter EaC source repository"
                    class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
                  >
                    <option value="">-- Select GitHub repository --</option>
                    {curOrg &&
                      props.repositoryOptions[curOrg].map((option) => {
                        return <option value={option}>{option}</option>;
                      })}
                  </select> */
                  }

                  <Input
                    id="repo"
                    name="repo"
                    type="text"
                    value={props.sourceRepository || ""}
                    required
                    placeholder="Enter EaC source repository name"
                    class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
                  />
                </div>
              )}
            </>
          )}

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.sourceName || ""}
              required
              placeholder="Enter EaC source name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.sourceDescription || ""}
              multiline
              required
              placeholder="Enter EaC source description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.sourceLookup ? "Save" : "Create"} EaC Source
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { JSX } from "preact";
import { Action, ActionGroup, classSet, Input } from "../../src.deps.ts";

export type EaCManageFormProps = {
  entLookup?: string;
  entName?: string;
  entDescription?: string;
} & JSX.HTMLAttributes<HTMLFormElement>;

export function EaCManageForm(props: EaCManageFormProps) {
  return (
    <form
      method="post"
      action="/api/eac"
      {...props}
      class={classSet(
        ["-:w-full -:max-w-sm -:md:max-w-md -:mx-auto -:py-3 -:mt-8"],
        props,
      )}
    >
      <div class="flex flex-wrap -mx-3 mb-4">
        <div class="w-full px-3">
          <label
            for="subscription-plan"
            class="block uppercase tracking-wide font-bold mb-2 text-xl text-center"
          >
            {props.entLookup ? "Edit" : "Create"} Enterprise
          </label>

          {props.entLookup && (
            <Input
              id="entLookup"
              name="entLookup"
              type="hidden"
              value={props.entLookup}
            />
          )}

          <div class="w-full p-3">
            <label
              for="name"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Name
            </label>

            <Input
              id="name"
              name="name"
              type="text"
              value={props.entName || ""}
              required
              placeholder="Enter enterprise name"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>

          <div class="w-full p-3">
            <label
              for="description"
              class="block uppercase tracking-wide font-bold mb-2 text-lg text-left"
            >
              Description
            </label>

            <Input
              id="description"
              name="description"
              type="text"
              value={props.entDescription || ""}
              multiline
              required
              placeholder="Enter enterprise description"
              class="appearance-none block w-full bg-white border border-gray-400 hover:border-gray-500 px-4 py-2 rounded leading-tight focus:outline-none focus:border-blue-500"
            />
          </div>
        </div>
      </div>

      <ActionGroup class="mt-8 flex-col">
        <>
          <Action
            type="submit"
            class="w-full md:w-auto text-white font-bold m-1 py-2 px-4 rounded focus:outline-none shadow-lg"
          >
            {props.entLookup ? "Save" : "Create"} Enterprise
          </Action>
        </>
      </ActionGroup>
    </form>
  );
}


import { Logo } from "../atoms/Logo.tsx";
import {
  Action,
  ActionStyleTypes,
  classSet,
  Header,
  HeaderProps,
} from "../src.deps.ts";

export function FathymHeader(props: HeaderProps) {
  return (
    <Header
      logo={
        <Action
          href="/"
          actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
        >
          <Logo />
        </Action>
      }
      {...props}
    />
  );
}


import { ComponentChildren, JSX } from "preact";
import { FeedCard, FeedCardProps } from "../../src.deps.ts";

export interface BuildFeedCardProps extends Omit<FeedCardProps, "subtitle"> {
  repository: string;
  subtext: number;
  timestamp: string;
  buildStatus: string;
}

export function BuildFeedCard(props: BuildFeedCardProps): JSX.Element {
  const subtitle = (
    <div class="flex flex-col text-sm text-gray-500">
      <div>{props.repository}</div>
      <div>{props.subtext}</div>
      <div>{props.buildStatus} - {props.timestamp}</div>
    </div>
  );

  return <FeedCard {...props} subtitle={subtitle} />;
}


import { ComponentChildren, isValidElement, JSX, VNode } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export enum ActionStyleTypes {
  Solid = 1 << 0,
  Outline = 1 << 1,
  Link = 1 << 2,
  Rounded = 1 << 3,
  Icon = 1 << 4,
  None = 1 << 5,
  All = ~0 << 6,
}

export function useActionChildren(
  children: ComponentChildren | Array<ActionProps>,
): { nav: ComponentChildren; navActions: Array<ActionProps> | undefined } {
  const nav = Array.isArray(children) //&& children.every(item => item instanceof ActionProps)
    ? undefined
    : (children as ComponentChildren);

  const navActions = Array.isArray(children) //&& children.every(item => item instanceof ActionProps)
    ? (children as Array<ActionProps>)
    : undefined;

  return { nav, navActions };
}

export type ActionAnchorProps = JSX.HTMLAttributes<HTMLAnchorElement>;

export type ActionButtonProps = JSX.HTMLAttributes<HTMLButtonElement>;

export type ActionProps = (ActionAnchorProps | ActionButtonProps) & {
  actionStyle?: ActionStyleTypes;
};

export function Action(props: ActionProps) {
  const actionStyle = props.actionStyle ||
    ActionStyleTypes.Solid | ActionStyleTypes.Rounded | ActionStyleTypes.Link;

  const shared = (
    <div
      class={classSet(
        [
          "-:block -:font-bold",
          "-:transition-colors -:duration-200 -:ease-out",
          (actionStyle & ActionStyleTypes.Icon) === ActionStyleTypes.Icon
            ? "-:px-1 -:py-1 -:hover:text-blue-700 -:hover:text-opacity-80"
            : "-:px-4 -:py-2",
          (actionStyle & ActionStyleTypes.Rounded) === ActionStyleTypes.Rounded
            ? "-:rounded"
            : "",
          (actionStyle & ActionStyleTypes.Solid) === ActionStyleTypes.Solid
            ? "-:bg-blue-500 -:text-white"
            : "-:text-black -:dark:text-white",
          (actionStyle & ActionStyleTypes.Outline) === ActionStyleTypes.Outline
            ? "-:text-blue-700 -:border-blue-700 -:border-solid -:border -:hover:border-blue-900"
            : "-:border-none",
          (actionStyle & ActionStyleTypes.Link) === ActionStyleTypes.Link &&
            (actionStyle & ActionStyleTypes.Icon) !== ActionStyleTypes.Link
            ? "-:hover:bg-blue-700 -:hover:bg-opacity-80 -:hover:text-white"
            : "",
        ],
        props,
      )}
    >
    </div>
  );

  return (
    <>
      {!props.href && (
        <button {...(props as ActionButtonProps)} class={shared.props.class} />
      )}

      {props.href && (
        <a {...(props as ActionAnchorProps)} class={shared.props.class} />
      )}
    </>
  );
}


import { ComponentChildren, type JSX, useState } from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export type InputProps =
  & (
    | JSX.HTMLAttributes<HTMLInputElement>
    | JSX.HTMLAttributes<HTMLTextAreaElement>
  )
  & {
    multiline?: boolean;
    // prepareValue?: (value: string) => string;
  };

export function Input(props: InputProps) {
  // const { prepareValue, value, ...rest } = props;

  // const [valueState, setValue] = useState(value);

  // const onValueChange = (value: string) => {
  //   if (prepareValue) {
  //     value = prepareValue(value);
  //   }

  //   setValue(value);
  // };

  // const onTextAreaChange = (
  //   e: JSX.TargetedEvent<HTMLTextAreaElement, Event>,
  // ) => {
  //   const target = (e.target as HTMLTextAreaElement)!;

  //   onValueChange(target.value);
  // };

  // const onInputChange = (e: JSX.TargetedEvent<HTMLInputElement, Event>) => {
  //   const target = (e.target as HTMLInputElement)!;

  //   onValueChange(target.value);
  // };

  // onChange={onTextAreaChange}
  // value={valueState}
  // onChange={onInputChange}
  // value={valueState}
  const input = props.multiline
    ? (
      <textarea
        {...(props as JSX.HTMLAttributes<HTMLTextAreaElement>)}
        class={classSet(
          [
            "-:w-full -:px-4 -:py-2 -:text-gray-700 -:bg-white -:border -:border-gray-300 -:rounded-md -:shadow-sm -:focus:outline-none -:focus:ring-2 -:focus:ring-blue-500 -:focus:border-blue-500",
          ],
          props,
        )}
      >
      </textarea>
    )
    : (
      <input
        {...(props as JSX.HTMLAttributes<HTMLInputElement>)}
        type={props.type || "text"}
        class={classSet(
          [
            "-:px-4 -:py-2 -:text-gray-700 -:bg-white -:border -:border-gray-300 -:rounded-md -:shadow-sm -:focus:outline-none -:focus:ring-2 -:focus:ring-blue-500 -:focus:border-blue-500",
          ],
          props,
        )}
      />
    );

  return input;
}


import { ComponentChildren, JSX, useState } from "../../src.deps.ts";
import { classSet } from "../../utils/jsx.utils.ts";

export type SlideToggleProps = JSX.HTMLAttributes<HTMLInputElement> & {
  children?: ComponentChildren;
};

export function SlideToggle(props: SlideToggleProps) {
  // const { checked, value, ...rest } = props;

  // const [checkedState, setCheckedState] = useState(checked);

  //       // onChange={() => setCheckedState(!checked)}
  //       // value={value}
  //       // checked={checkedState}
  return (
    <label className="relative inline-flex items-center cursor-pointer">
      <input {...props} type="checkbox" class="sr-only peer" />

      <div
        class={classSet(
          [
            "peer -:w-11 -:h-6 -:bg-gray-200 -:peer-focus:outline-none -:peer-focus:ring-4 -:peer-focus:ring-blue-300 -:dark:peer-focus:ring-blue-800 -:rounded-full -:dark:bg-gray-700 -:peer-checked:after:translate-x-full -:peer-checked:after:border-white -:after:content-[''] -:after:absolute -:after:top-[2px] -:after:left-[2px] -:after:bg-white -:after:border-gray-300 -:after:border -:after:rounded-full -:after:h-5 -:after:w-5 -:after:transition-all -:dark:border-gray-600 -:peer-checked:bg-blue-600",
          ],
          props,
        )}
      >
      </div>

      {props.children && (
        <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">
          {props.children}
        </span>
      )}
    </label>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import {
  Action,
  ActionProps,
  ActionStyleTypes,
  useActionChildren,
} from "../atoms/Action.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { MenuButton, MenuButtonStyleTypes } from "./MenuButton.tsx";

export interface ActionGroupProps extends JSX.HTMLAttributes<HTMLElement> {
  actionStyle?: ActionStyleTypes;

  children?: ComponentChildren | Array<ActionProps>;
}

export function ActionGroup(props: ActionGroupProps) {
  const { nav, navActions } = useActionChildren(props.children);

  const children: ComponentChildren = nav ||
    navActions?.map((action) => (
      <Action actionStyle={props.actionStyle} {...action} />
    ));

  return (
    <nav {...props} class={classSet(["-:px-2 -:flex -:items-center"], props)}>
      {children}
    </nav>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export enum DisplayStyleTypes {
  Top = 1 << 0,
  Center = 1 << 1,
  Bottom = 1 << 2,
  Large = 1 << 3,
  None = 1 << 4,
}

export type DisplayProps = JSX.HTMLAttributes<HTMLDivElement> & {
  displayStyle?: DisplayStyleTypes;

  title?: string | ComponentChildren;
};

export function useDisplayChildren(
  children: ComponentChildren | Array<DisplayProps>,
): {
  display: ComponentChildren;
  displayDetails: Array<DisplayProps> | undefined;
  displayElement: ComponentChildren;
} {
  const display = Array.isArray(children) //&& children.every(item => item instanceof DisplayProps)
    ? undefined
    : (children as ComponentChildren);

  const displayDetails = Array.isArray(children) //&& children.every(item => item instanceof DisplayProps)
    ? (children as Array<DisplayProps>)
    : undefined;

  const displayElement = display || (
    <>
      {displayDetails?.map((dd) => <Display {...dd} />)}
    </>
  );

  return { display, displayDetails, displayElement };
}

export function Display(props: DisplayProps) {
  const displayStyle = props.displayStyle || DisplayStyleTypes.None;

  const displayTitle = typeof props.title === "string"
    ? (
      <h1
        class={classSet([
          "font-bold",
          (displayStyle & DisplayStyleTypes.Large) === DisplayStyleTypes.Large
            ? "text-3xl md:text-4xl inline-block"
            : "text-2xl md:text-3xl inline-block",
        ])}
      >
        {props.title}
      </h1>
    )
    : (
      props.title as ComponentChildren
    );

  return (
    <div
      {...props}
      class={classSet(
        [
          "-:flex -:flex-col",
          (displayStyle & DisplayStyleTypes.Center) === DisplayStyleTypes.Center
            ? "-:justify-center -:items-center"
            : undefined,
          (displayStyle & DisplayStyleTypes.Top) === DisplayStyleTypes.Top
            ? "-:justify-start -:items-start"
            : undefined,
          (displayStyle & DisplayStyleTypes.Bottom) === DisplayStyleTypes.Bottom
            ? "-:justify-end -:items-end"
            : undefined,
        ],
        props,
      )}
    >
      {displayTitle}

      {props.children}
    </div>
  );
}


import { ComponentChildren, JSX, useEffect, useState } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export type LineItemProps = Omit<JSX.HTMLAttributes<HTMLDivElement>, "icon"> & {
  actionPath: string;

  actionText: ComponentChildren;

  confirmAction?: () => Promise<void>;

  confirmIcon?: ComponentChildren;

  confirmRedirect?: string;

  confirmText?: string;
};

export function LineItem(props: LineItemProps) {
  const [reload, setReload] = useState(false);

  const {
    actionText,
    actionPath,
    confirmAction,
    confirmIcon,
    confirmRedirect,
    confirmText,
  } = props;

  const handleAction = async () => {
    if (confirmAction) {
      if (confirmText && confirm(confirmText)) {
        await confirmAction();
      } else {
        await confirmAction();
      }

      setReload(true);
    }
  };

  useEffect(() => {
    if (reload) {
      location.href = confirmRedirect || `${location.href}`;
    }
  }, [reload]);

  return (
    <div>
      <a href={actionPath} class="text-blue-500 hover:underline">
        {actionText}
      </a>

      {confirmIcon && (
        <button
          class="ml-2"
          onClick={() => {
            handleAction().then();
          }}
        >
          {confirmIcon}
        </button>
      )}
    </div>
  );
}


import { ComponentChildren, JSX, useEffect, useState } from "../src.deps.ts";
import {
  Action,
  ActionProps,
  ActionStyleTypes,
  useActionChildren,
} from "../atoms/Action.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export enum MenuButtonStyleTypes {
  Popover = 1 << 0,
  Slideout = 1 << 1,
  Responsive = 1 << 2,
}

export interface MenuButtonProps extends JSX.HTMLAttributes<HTMLElement> {
  children?: ComponentChildren | Array<ActionProps>;

  menuStyle?: MenuButtonStyleTypes;

  toggleChildren: ComponentChildren;
}

export function MenuButton(props: MenuButtonProps) {
  const { nav, navActions } = useActionChildren(props.children);

  const [showMenu, setShowMenu] = useState(false);

  const menuCloseCheck = (eTarget: HTMLDivElement) => {
    setShowMenu(!!eTarget!.closest(".menu-wrapper"));
  };

  const outsideClickHandler = () => {
    const eventHandler = (e: MouseEvent) => {
      menuCloseCheck(e.target as HTMLDivElement);
    };

    window.document.addEventListener("click", eventHandler);

    return () => {
      window.document.removeEventListener("click", eventHandler);
    };
  };

  useEffect(outsideClickHandler, []);

  return (
    <>
      <div class={classSet(["-:menu-wrapper -:relative"], props)}>
        <Action
          onClick={() => setShowMenu(!showMenu)}
          class="flex items-center p-2 rounded"
        >
          {props.toggleChildren}
        </Action>

        {showMenu && (
          <div
            class={classSet([
              "bg-white shadow-md",
              props.menuStyle === MenuButtonStyleTypes.Popover
                ? "absolute right-0 mt-2"
                : undefined,
              props.menuStyle === MenuButtonStyleTypes.Slideout
                ? "fixed top-0 bottom-0 left-0 z-50 w-[80%]"
                : undefined,
              props.menuStyle === MenuButtonStyleTypes.Responsive
                ? "fixed top-0 bottom-0 left-0 z-50 w-[80%] md:absolute md:right-0 md:mt-2 md:top-auto md:bottom-auto md:left-auto md:w-auto"
                : undefined,
            ])}
          >
            {nav || (
              <ul class="divide-y divide-gray-200">
                {navActions?.map((action) => (
                  <li>
                    <Action
                      actionStyle={ActionStyleTypes.None}
                      class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                      {...action}
                    />
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}
      </div>
    </>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { MenuButton, MenuButtonStyleTypes } from "./MenuButton.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export interface ResponsiveSetProps extends JSX.HTMLAttributes<HTMLElement> {
  menuStyle?: MenuButtonStyleTypes;

  toggleChildren: ComponentChildren;
}

export function ResponsiveSet(props: ResponsiveSetProps) {
  return (
    <>
      <MenuButton
        class="md:hidden"
        menuStyle={props.menuStyle || MenuButtonStyleTypes.Responsive}
        toggleChildren={props.toggleChildren}
      >
        {props.children}
      </MenuButton>

      <span
        {...props}
        class={classSet([
          "-:hidden -:md:flex -:flex-col -:md:flex-row -:md:items-center",
        ], props)}
      >
        {props.children}
      </span>
    </>
  );
}


import { ComponentChildren, JSX, useState } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";

export interface Tab {
  label: string;
  content: ComponentChildren;
}

export interface TabsProps extends JSX.HTMLAttributes<HTMLDivElement> {
  tabs: Tab[];
}

export function Tabs(props: TabsProps) {
  const { tabs, ...rest } = props;

  const [activeTab, setActiveTab] = useState(0);

  return (
    <div {...rest}>
      <div class="flex border-b border-gray-200">
        {tabs.map((tab, index) => (
          <button
            key={index}
            class={classSet([
              "py-2 px-4 font-medium text-sm",
              activeTab === index
                ? "border-b-2 border-blue-500 text-blue-500"
                : "text-gray-500 hover:text-gray-700",
            ])}
            onClick={() => setActiveTab(index)}
          >
            {tab.label}
          </button>
        ))}
      </div>
      <div class="mt-4">{tabs[activeTab].content}</div>
    </div>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { DisplayProps, useDisplayChildren } from "../molecules/Display.tsx";
import { ActionProps, useActionChildren } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";

export interface FeaturesProps extends JSX.HTMLAttributes<HTMLDivElement> {
  callToAction?: ComponentChildren;

  children?: ComponentChildren | Array<DisplayProps>;
}

export function Features(props: FeaturesProps) {
  const { displayElement } = useDisplayChildren(props.children);

  return (
    <div
      {...props}
      class={classSet(["-:flex -:flex-col -:justify-center"], props)}
    >
      <div class="flex flex-col md:flex-row gap-8 justify-center md:flex-row md:gap-16 [&>*]:flex-grow [&>*]:basis-0">
        {displayElement}
      </div>

      {props.callToAction}
    </div>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export interface FooterProps extends JSX.HTMLAttributes<HTMLElement> {
  companyDescription?: string;

  companyName?: string;

  nav?: ComponentChildren | Array<ActionProps>;
}

export function Footer(props: FooterProps) {
  return (
    <footer
      {...props}
      class={classSet(["-:bg-gray-100 -:dark:bg-gray-800"], props)}
    >
      <div class="max-w-6xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div class="md:flex justify-between">
          <div class="mb-4 md:mb-0">
            {props.companyName && (
              <Action
                href="/"
                class="text-2xl uppercase tracking-widest"
                actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
              >
                {props.companyName}
              </Action>
            )}

            {props.companyDescription && (
              <p class="text-gray-400 mt-2">{props.companyDescription}</p>
            )}
          </div>

          <div class="md:flex md:flex-col md:items-end">
            <ActionGroup
              actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
              class="flex flex-wrap justify-center -mx-2 mt-4 md:mt-0"
            >
              {props.nav}
            </ActionGroup>

            <div class="mt-4 md:mt-8">
              <p class="text-gray-400">
                &copy; {new Date().getFullYear()}{" "}
                {props.companyName}. All rights reserved.
              </p>
            </div>
          </div>
        </div>
      </div>
    </footer>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import {
  Action,
  ActionAnchorProps,
  ActionButtonProps,
  ActionProps,
  ActionStyleTypes,
} from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { MenuButton, MenuButtonStyleTypes } from "../molecules/MenuButton.tsx";

export type HeaderLogo = {
  LogoAlt?: string;

  LogoUrl?: string;

  LogoHref?: string;
} & JSX.HTMLAttributes<HTMLImageElement>;

export function useHeaderLogoChildren(
  children: ComponentChildren | HeaderLogo,
): {
  logo: ComponentChildren;
  logoDetails: HeaderLogo | undefined;
  logoAction: JSX.Element;
} {
  const isHeaderLogo = !!(children as HeaderLogo)?.LogoUrl;

  const logo = isHeaderLogo ? undefined : (children as ComponentChildren);

  const logoDetails = isHeaderLogo ? (children as HeaderLogo) : undefined;

  const logoAction = (
    <Action
      href={logoDetails?.LogoHref}
      actionStyle={ActionStyleTypes.Link | ActionStyleTypes.Rounded}
    >
      <img
        src={logoDetails?.LogoUrl}
        alt={logoDetails?.LogoAlt}
        {...(logoDetails || {})}
        class={classSet(
          ["-:w-48 -:sm:w-32 -:fill-black -:dark:fill-white"],
          logoDetails,
        )}
      />
    </Action>
  );

  return { logo, logoDetails, logoAction };
}

export interface HeaderProps extends JSX.HTMLAttributes<HTMLElement> {
  logo?: ComponentChildren | HeaderLogo;

  nav?: ComponentChildren | Array<ActionProps>;
}

export function Header(props: HeaderProps) {
  const { logo, logoAction } = useHeaderLogoChildren(props.logo);

  return (
    <header
      {...props}
      class={classSet(
        [
          "-:flex -:items-center -:justify-between -:bg-gray-100 -:dark:bg-gray-800",
        ],
        props,
      )}
    >
      <div class="px-4 py-3 sm:p-0">{logo || logoAction}</div>

      <ActionGroup>{props.nav}</ActionGroup>
    </header>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { ActionProps } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";
import { Display, DisplayProps } from "../molecules/Display.tsx";

export enum HeroStyleTypes {
  Rounded = 1 << 0,
  Inset = 1 << 1,
  Horizonal = 1 << 2,
  None = 1 << 3,
}

export interface HeroProps extends DisplayProps {
  children?: ComponentChildren | Array<ActionProps>;

  callToAction?: string | ComponentChildren;

  heroStyle?: HeroStyleTypes;
}

export function Hero(props: HeroProps) {
  const callToAction = typeof props.callToAction === "string"
    ? <p class="text-xl max-w-lg text-blue-100">{props.callToAction}</p>
    : (
      props.callToAction as ComponentChildren
    );

  const heroStyle = props.heroStyle ||
    HeroStyleTypes.Rounded | HeroStyleTypes.Inset;

  return (
    <Display
      {...props}
      class={classSet(
        [
          "-:p-8 -:gap-8 -:drop-shadow-lg",
          (heroStyle & HeroStyleTypes.Inset) === HeroStyleTypes.Inset
            ? "-:w-[80%] -:my-8 -:mx-auto -:md:w-[90%] -:md:my-6 -:sm:w-[95%] -:sm:my-4 -:xs:w-[98%] -:xs:max-w-[98%] -:xs:my-2"
            : "-:w-full",
          "-:bg-cover -:bg-center -:bg-no-repeat -:bg-gray-100 -:text-white",
          (heroStyle & HeroStyleTypes.Rounded) === HeroStyleTypes.Rounded
            ? "-:rounded-3xl"
            : undefined,
        ],
        props,
      )}
    >
      <div
        class={classSet([
          "flex",
          (heroStyle & HeroStyleTypes.Horizonal) === HeroStyleTypes.Horizonal
            ? "flex-col [&>*]:mx-auto md:flex-row md:[&>*]:mx-2"
            : "flex-col [&>*]:mx-auto",
        ])}
      >
        {callToAction}

        <ActionGroup>{props.children}</ActionGroup>
      </div>
    </Display>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { Input, InputProps } from "../atoms/forms/Input.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export type SignInOptions = {
  usernameInputProps?: InputProps;
  passwordInputProps?: InputProps;
  submitActionProps?: ActionProps;
  forgotPasswordActionProps?: ActionProps;
  formProps?: JSX.HTMLAttributes<HTMLFormElement>;
};

export interface SignInProps extends JSX.HTMLAttributes<HTMLElement> {
  oauthProviders?: Array<ActionProps>;
  signInOptions?: SignInOptions;
}

export function SignIn(props: SignInProps) {
  const { oauthProviders, signInOptions } = props;

  return (
    <div class={classSet(["-:flex -:flex-col -:space-y-4"], props)}>
      {oauthProviders && (
        <ActionGroup class="flex flex-col space-y-2">
          {oauthProviders.map((provider, index) => (
            <Action key={index} {...provider} />
          ))}
        </ActionGroup>
      )}

      {signInOptions && (
        <form {...signInOptions.formProps} class="flex flex-col space-y-2">
          <Input
            placeholder="Username"
            name="Username"
            {...signInOptions.usernameInputProps}
          />

          <Input
            placeholder="Password"
            type="password"
            name="password"
            {...signInOptions.passwordInputProps}
          />

          <div class="flex flex-col md:flex-row md:space-x-2 space-y-2 md:space-y-0 md:items-center">
            <Action
              actionStyle={ActionStyleTypes.Link}
              class="order-2 md:order-1"
              children={"Forgot Password"}
              {...signInOptions.forgotPasswordActionProps}
            />

            <Action
              type="submit"
              actionStyle={ActionStyleTypes.Solid | ActionStyleTypes.Rounded}
              class="order-1 md:order-2"
              children={"Submit"}
              {...signInOptions.submitActionProps}
            />
          </div>
        </form>
      )}
    </div>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { Action, ActionProps, ActionStyleTypes } from "../atoms/Action.tsx";
import { Input, InputProps } from "../atoms/forms/Input.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { classSet } from "../utils/jsx.utils.ts";

export type SignUpOptions = {
  usernameInputProps?: InputProps;
  passwordInputProps?: InputProps;
  confirmPasswordInputProps?: InputProps;
  submitActionProps?: ActionProps;
  formProps?: JSX.HTMLAttributes<HTMLFormElement>;
};

export interface SignUpProps extends JSX.HTMLAttributes<HTMLElement> {
  signUpOptions?: SignUpOptions;
}

export function SignUp(props: SignUpProps) {
  const { signUpOptions } = props;

  return (
    <div class={classSet(["-:flex -:flex-col -:space-y-4"], props)}>
      {signUpOptions && (
        <form {...signUpOptions.formProps} class="flex flex-col space-y-2">
          <Input
            placeholder="Username"
            name="Username"
            {...signUpOptions.usernameInputProps}
          />
          <Input
            placeholder="Password"
            type="password"
            name="password"
            {...signUpOptions.passwordInputProps}
          />
          <Input
            placeholder="Confirm Password"
            type="password"
            name="confirmPassword"
            {...signUpOptions.confirmPasswordInputProps}
          />

          <Action
            {...signUpOptions.submitActionProps}
            type="submit"
            actionStyle={ActionStyleTypes.Solid | ActionStyleTypes.Rounded}
          />
        </form>
      )}
    </div>
  );
}


import { ComponentChildren } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { Features, FeaturesProps } from "./Features.tsx";
import { DisplayStyleTypes } from "../molecules/Display.tsx";

export function buildTitle(
  stepNumber: number,
  title: ComponentChildren,
  complete: boolean,
  active: boolean,
): ComponentChildren {
  const textGradient = (
    <div
      class={classSet([
        complete
          ? "bg-gradient-to-tr from-green-500 to-blue-500/75"
          : active
          ? "bg-gradient-to-tr from-blue-500 to-purple-500/75"
          : "bg-gradient-to-tr from-blue-500 to-blue-700/75",
      ])}
    >
    </div>
  );

  const circleGradient = (
    <div
      class={classSet([
        complete
          ? "bg-gradient-to-br from-green-500 to-blue-700/75 py-2"
          : active
          ? "bg-gradient-to-br from-blue-500 to-purple-500/75"
          : "bg-gradient-to-br from-blue-500 to-blue-700/75",
      ])}
    >
    </div>
  );

  return (
    <h1
      class={classSet(
        [
          "text-2xl font-bold md:text-3xl inline-block my-4 bg-clip-text text-transparent",
        ],
        textGradient.props,
      )}
    >
      <span
        class={classSet(
          ["rounded-full px-4 py-1 border(solid 1) m-2 shadow-lg text-white"],
          circleGradient.props,
        )}
      >
        {complete ? "\u2713" : stepNumber}
      </span>

      {title}
    </h1>
  );
}

export interface StepFeature {
  children: ComponentChildren;

  class?: string;

  description?: string;

  title: string | ComponentChildren;
}

export interface StepsFeaturesProps extends FeaturesProps {
  children?: Array<StepFeature>;

  hideDescription?: boolean;

  step?: number;
}

export function StepsFeatures(props: StepsFeaturesProps) {
  return (
    <Features
      {...props}
      class={classSet(["-:m-2 -:md:m-8 -:text-center"], props)}
    >
      {props.children?.map((childStep: StepFeature, i) => {
        const active = props.step == i;

        const complete: boolean = (props.step as number) > i;

        const title = typeof childStep.title === "string"
          ? buildTitle(i + 1, childStep.title, complete, active)
          : childStep.title;

        return {
          title: title,
          class: classSet(
            ["-:shadow-lg -:p-4 -:m-4 -:justify-start -:sm:p-1 -:sm:m-1"],
            {
              class: childStep.class,
            },
          ),
          displayStyle: DisplayStyleTypes.Center,
          children: (
            <>
              <p class="m-2">{childStep.description}</p>

              {props.step === i && childStep.children}
            </>
          ),
        };
      })}
    </Features>
  );
}


import { ComponentChildren, JSX } from "../src.deps.ts";
import { classSet } from "../utils/jsx.utils.ts";
import { DisplayProps, useDisplayChildren } from "../molecules/Display.tsx";
import { ActionProps, useActionChildren } from "../atoms/Action.tsx";
import { ActionGroup } from "../molecules/ActionGroup.tsx";
import { Header, HeaderProps } from "../organisms/Header.tsx";
import { Footer, FooterProps } from "../organisms/Footer.tsx";

export interface BasicLayoutProps extends JSX.HTMLAttributes<HTMLDivElement> {
  footer?: FooterProps | ComponentChildren;

  header?: HeaderProps | ComponentChildren;

  children?: ComponentChildren;
}

export function BasicLayout(props: BasicLayoutProps) {
  const { headerProps, header } = {
    headerProps: (props.header as HeaderProps)?.nav
      ? props.header as HeaderProps
      : undefined,
    header: !(props.header as HeaderProps)?.nav
      ? props.header as ComponentChildren
      : undefined,
  };

  const { footerProps, footer } = {
    footerProps: (props.footer as FooterProps)?.nav
      ? props.footer as FooterProps
      : undefined,
    footer: !(props.footer as FooterProps)?.nav
      ? props.footer as ComponentChildren
      : undefined,
  };

  return (
    <>
      {headerProps ? <Header {...headerProps} /> : header}

      {props.children && (
        <main
          class={classSet(
            ["-:flex-grow", "-:min-h-[100vh]"],
            props,
          )}
        >
          {props.children}
        </main>
      )}

      {footerProps ? <Footer {...footerProps} /> : footer}
    </>
  );
}


import { classSet, JSX, moment, renderMarkdown } from "../src.deps.ts";

export type ChatBoxProps = Omit<JSX.HTMLAttributes<HTMLDivElement>, "icon"> & {
  color: string;

  content: string;

  icon: JSX.Element;

  justifyEnd?: boolean;

  timestamp: Date;
};

export function ChatBox(props: ChatBoxProps) {
  const contentMdx = renderMarkdown(props.content);

  return (
    <>
      <div
        class={classSet(
          [
            "-:flex -:w-full -:mt-2 -:mx-3",
            props.justifyEnd ? "-:ml-auto -:justify-end" : undefined,
          ],
          props,
        )}
      >
        <div
          class={classSet([
            "flex flex-col",
            props.justifyEnd ? "order-1" : "order-2",
          ])}
        >
          <div
            class={classSet([
              `bg-${props.color}-600 border-${props.color}-500`,
              "bg-opacity-10 border border-opacity-40 max-w-screen-xs lg:max-w-screen-sm xl:max-w-screen-md overflow-auto p-3 rounded-l-lg rounded-br-lg",
            ])}
          >
            <p
              class="text-sm [&_pre]:bg-gray-200 dark:[&_pre]:bg-gray-900 [&_pre]:text-grey-800 dark:[&_pre]:text-white [&_pre]:m-2 [&_pre]:p-2 [&_pre]:rounded-md [&_pre]:overflow-auto"
              dangerouslySetInnerHTML={{ __html: contentMdx }}
            >
            </p>
          </div>

          <span class="text-xs text-gray-500 leading-none">
            {moment(props.timestamp).from()}
          </span>
        </div>

        <div
          class={classSet([
            `bg-${props.color}-600 border-${props.color}-500 text-${props.color}-600`,
            "flex flex-shrink-0 h-6 w-6 md:h-10 md:w-10 justify-center rounded-full bg-opacity-10 border border-opacity-40 overflow-clip",
            props.justifyEnd ? "order-2 ml-2" : "order-1 mr-2",
          ])}
        >
          <div class="flex self-center">{props.icon}</div>
        </div>
      </div>
    </>
  );
}


import { useEffect, useRef } from "preact/hooks";
import {
  Action,
  classSet,
  ComponentChildren,
  Input,
  JSX,
} from "../src.deps.ts";

export type ChatInputProps =
  & Omit<
    JSX.HTMLAttributes<HTMLFormElement>,
    "icon"
  >
  & {
    children: ComponentChildren;

    icon?: ComponentChildren;

    placeholder?: string;

    hideOpenChat?: boolean;

    useOpenChat?: boolean;
  };

export function ChatInput(props: ChatInputProps) {
  const chatInputRef = useRef<HTMLFormElement>(null);

  props.id = props.id || "chat-input";

  const handleKeyDown = (event: KeyboardEvent) => {
    if (event.key === "Enter" && !event.shiftKey) {
      event.preventDefault();

      const formEl: HTMLFormElement = document.querySelector(`#${props.id}`)!;

      formEl.submit();
    }
  };

  const scrollIntoView = () => {
    setTimeout(() => {
      if (chatInputRef?.current) {
        chatInputRef?.current?.scrollIntoView();
      } else {
        scrollIntoView();
      }
    }, 0);
  };

  scrollIntoView();

  return (
    <form
      method="post"
      ref={chatInputRef}
      {...(props as JSX.HTMLAttributes<HTMLFormElement>)}
      class={classSet(
        [
          "-:my-3 -:rounded-md -:p-3 -:bg-blue-600 -:bg-opacity-10 -:border -:border-blue-500 -:border-opacity-40",
        ],
        props,
      )}
    >
      <div class="relative z-0 flex flex-col md:flex-row">
        <Input
          multiline={true}
          name="content"
          class="block w-full rounded-sm rounded-r-none border-gray-300 text-sm shadow-sm focus:z-10 dark:bg-slate-950 focus:border-primary-400 focus:ring focus:ring-primary-200 focus:ring-opacity-50 disabled:cursor-not-allowed disabled:bg-gray-50 disabled:text-gray-500 text-black"
          placeholder={props.placeholder ||
            "Ask Thinky... (Shift + Enter for a new line)"}
          onKeyDown={handleKeyDown}
        />

        <Action
          type="submit"
          for="version"
          class="flex items-center space-x-1 rounded-sm rounded-l-none border border-l-0 border-blue-600 bg-blue-600 px-3 py-1.5 text-center text-xs font-medium text-white shadow-sm transition-all hover:border-blue-800 hover:bg-blue-800 focus:ring focus:ring-blue-200 disabled:cursor-not-allowed disabled:border-blue-300 disabled:bg-blue-300"
        >
          {props.icon || props.children}
        </Action>
      </div>

      {!props.hideOpenChat && (
        <div class="mt-2">
          <label class="inline-flex items-center">
            <Input
              type="checkbox"
              name="useOpenChat"
              class="form-checkbox h-4 w-4 text-blue-600"
              checked={props.useOpenChat}
            />

            <span class="ml-2 text-gray-500">Use Open Chat</span>
          </label>
        </div>
      )}
    </form>
  );
}


import { JSX } from "preact";
import { ChatBox } from "../molecules/ChatBox.tsx";

export type ChatHistoryMessage = {
  Color: string;

  Content: string;

  Icon: JSX.Element;

  JustifyEnd?: boolean;

  Timestamp: Date;
};

export type ChatHistoryProps = {
  messages: ChatHistoryMessage[];
};

export function ChatHistory(props: ChatHistoryProps) {
  return (
    <>
      {props.messages.map((message, index) => {
        return (
          <ChatBox
            key={index}
            color={message.Color}
            content={message.Content}
            icon={message.Icon}
            justifyEnd={message.JustifyEnd}
            timestamp={message.Timestamp!}
          />
        );
      })}
    </>
  );
}


import {
  classSet,
  ComponentChildren,
  Display,
  DisplayProps,
} from "../src.deps.ts";

export type IoTDisplayProps = DisplayProps & {
  icon: ComponentChildren;

  controls: ComponentChildren;
};

export function IoTDisplay(props: IoTDisplayProps) {
  const { icon, title, controls, ...rest } = props;

  const header = (
    <div class="flex items-center">
      {icon}

      <div>{title}</div>
    </div>
  );

  return (
    <Display
      {...rest}
      class={classSet(
        ["-:p-2 -:md:p-4", "-:rounded -:focus:outline-none -:shadow-lg"],
        props,
      )}
    >
      <div class="flex flex-col md:flex-row text-center md:text-left h-64px">
        <div class="flex-grow">{header}</div>

        <div class="mx-auto">{controls}</div>
      </div>

      <div class="p-2 md:p-4">{props.children}</div>
    </Display>
  );
}


import { render } from "../src.deps.ts";

export type BasicSummaryProps = {
  abstract: string;

  content: string;

  title: number;
};

export function BasicSummary(props: BasicSummaryProps) {
  const contentMdx = render(props.content);

  return (
    <div class="justify-center content-center bg-slate-100 dark:bg-slate-900 justify-center content-center">
      <div class="text-lg font-bold text-slate-700 dark:text-white justify-center content-center">
        {props.title}
      </div>
      <div class="text-sm font-light text-slate-800 dark:text-white">
        {props.abstract}
      </div>
      <div
        class="p-3 pb-6 text-sm font-light"
        dangerouslySetInnerHTML={{ __html: contentMdx }}
      >
      </div>
    </div>
  );
}


export type BulletListProps = {
  abstract: string;

  bullets: string[];

  title: string;
};

export function BulletList(props: BulletListProps) {
  return (
    <div class="justify-center content-center bg-slate-100 dark:bg-slate-900 justify-center content-center">
      <div class="text-md font-bold text-slate-700 dark:text-white justify-center content-center">
        {props.title}
      </div>
      <div class="text-sm font-light text-slate-800 dark:text-white">
        {props.abstract}
      </div>
      <div class="p-2">
        <ul>
          {props.bullets.map((bulletPoint, index) => (
            <li key={index}>
              {/* <div class="text-md mb-1">{bulletPoint.title}</div> */}
              <div class="text-xs font-light pl-2 mb-2">
                {bulletPoint}
                {/* {bulletPoint.content} */}
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type BarChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function BarChart(props: BarChartProps) {
  return <FathymChart type="bar" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type BubbleChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function BubbleChart(props: BubbleChartProps) {
  return <FathymChart type="bubble" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type DoughnutChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function DoughnutChart(props: DoughnutChartProps) {
  return <FathymChart type="doughnut" options={{}} {...props} />;
}


import { Chart, ChartOptions, ChartType } from "../../src.deps.ts";

export type FathymChartProps<
  TType extends ChartType = ChartType,
> = {
  data: number[];

  labels: string[];

  options?: ChartOptions<TType>;

  title: string;

  type: TType;
};

export function FathymChart(props: FathymChartProps) {
  return (
    <div class="justify-center content-center bg-slate-100 dark:bg-slate-900 justify-center content-center">
      <div>
        <div class="text-lg font-bold text-slate-700 dark:text-white justify-center content-center">
          {props.title}
        </div>
        {
          /* <div class="text-small font-light mb-4 text-slate-800 dark:text-white">
          Subheading for context commentary
        </div> */
        }
        <Chart
          type={props.type}
          options={props.options || {}}
          data={{
            labels: props.labels,
            datasets: [
              {
                label: props.title,
                data: props.data,
                // borderColor: templateData.pieChart.borderColor,
                // backgroundColor: templateData.pieChart.backgroundColor,
                borderWidth: 1,
              },
            ],
          }}
        />
      </div>
    </div>
  );
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type LineChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function LineChart(props: LineChartProps) {
  return <FathymChart type="line" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type PieChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function PieChart(props: PieChartProps) {
  return <FathymChart type="pie" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type PolarChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function PolarChart(props: PolarChartProps) {
  return <FathymChart type="polarArea" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type RadarChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function RadarChart(props: RadarChartProps) {
  return <FathymChart type="radar" options={{}} {...props} />;
}


import { FathymChart, FathymChartProps } from "./FathymChart.tsx";

export type ScatterChartProps = Omit<
  FathymChartProps,
  "type" | "options"
>;

export function ScatterChart(props: ScatterChartProps) {
  return <FathymChart type="scatter" options={{}} {...props} />;
}


import {
  Action,
  ActionGroup,
  ActionProps,
  classSet,
  ComponentChildren,
  JSX,
} from "../src.deps.ts";

export interface FeedCardProps
  extends Omit<JSX.HTMLAttributes<HTMLDivElement>, "title"> {
  title: ComponentChildren;
  avatar: string | ComponentChildren;
  subtitle: ComponentChildren;
  children?: ComponentChildren;
  actions?: ActionProps[] | ComponentChildren;
}

export function FeedCard(props: FeedCardProps): JSX.Element {
  const actions = Array.isArray(props.actions) ? props.actions : undefined;
  return (
    <div class={classSet(["-:bg-white -:rounded-lg -:shadow-md -:p-4"], props)}>
      <div class="flex items-center">
        {typeof props.avatar === "string"
          ? (
            <img
              src={props.avatar}
              class="w-10 h-10 rounded-full mr-2"
              alt={props.title as string}
            />
          )
          : (
            props.avatar
          )}
        <div class="flex flex-col">
          {props.title}
          {props.subtitle}
        </div>
      </div>
      {props.children}
      <div class="flex justify-center align-middle mt-4">
        <ActionGroup class="flex-grow flex justify-center align-middle">
          <>
            {!actions && props.actions}
            {actions &&
              actions.map((action, index) => (
                <Action
                  key={index}
                  {...action}
                />
              ))}
          </>
        </ActionGroup>
      </div>
    </div>
  );
}


import { Action, ActionProps, ComponentChildren, JSX } from "../src.deps.ts";

export interface FeedCardListProps extends JSX.HTMLAttributes<HTMLDivElement> {
  cards: ComponentChildren;
  loadMore?: ActionProps;
}

export function FeedCardList(props: FeedCardListProps): JSX.Element {
  const { cards, loadMore, ...rest } = props;

  return (
    <div {...rest}>
      {cards}

      {loadMore && (
        <div class="flex justify-center">
          <Action {...loadMore} />
        </div>
      )}
    </div>
  );
}


import { Action, classSet, JSX, useState } from "../src.deps.ts";

export interface PostFormProps extends JSX.HTMLAttributes<HTMLFormElement> {
  avatar: string;
  maxLength?: number;
  value?: string;
}

export function PostForm(props: PostFormProps): JSX.Element {
  const [inputValue, setInputValue] = useState(props.value || "");

  const handleInput = (event: Event) => {
    const input = event.target as HTMLInputElement;
    const value = input.value;
    const maxLength = props.maxLength || 400;

    if (value.length > maxLength) {
      input.value = value.slice(0, maxLength);
    }

    setInputValue(value);
  };

  return (
    <form
      {...props}
      class={classSet(["-:bg-white -:rounded-lg -:shadow-md -:p-4"], props)}
    >
      <div class="flex items-center">
        <img
          src={props.avatar}
          class="w-10 h-10 rounded-full mr-2"
          alt="User Avatar"
        />
        <textarea
          class="w-full h-20 p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="Write your post..."
          onInput={handleInput}
          maxLength={400}
          value={inputValue}
        >
        </textarea>
        <div class="flex justify-end ml-2">
          <Action
            type="submit"
            class="bg-blue-500 text-white px-4 py-2 rounded-lg"
          >
            Post
          </Action>
        </div>
      </div>
      <div class="text-gray-500 text-right mt-2">
        <span>{400 - inputValue.length}</span> characters remaining
      </div>
    </form>
  );
}


import { classSet, JSX } from "../src.deps.ts";
import { FeedCardList, FeedCardListProps } from "./FeedCardList.tsx";
import { PostForm, PostFormProps } from "./PostForm.tsx";

export interface PostWithFeedProps extends JSX.HTMLAttributes<HTMLDivElement> {
  feedCardListProps: FeedCardListProps;
  postFormProps: PostFormProps;
}

export function PostWithFeed(props: PostWithFeedProps): JSX.Element {
  const { feedCardListProps, postFormProps, ...divProps } = props;

  return (
    <div {...divProps} class={classSet(["-:flex -:flex-col"], props)}>
      <PostForm {...postFormProps} />
      <FeedCardList {...feedCardListProps} />
    </div>
  );
}


import {
  Action,
  ActionGroup,
  ActionProps,
  classSet,
  ComponentChildren,
  JSX,
  MenuButton,
  MenuButtonProps,
  MenuButtonStyleTypes,
} from "../src.deps.ts";

export interface ProfileDisplayProps
  extends JSX.HTMLAttributes<HTMLDivElement> {
  username: string;
  avatar: string;
  abstract: string;
  information: { Icon: ComponentChildren; Details: string }[];
  primaryAction: ActionProps;
  actions?: ActionProps[] | ComponentChildren;
}

export function ProfileDisplay(props: ProfileDisplayProps): JSX.Element {
  const actions = Array.isArray(props.actions) ? props.actions : undefined;

  return (
    <div class={classSet(["-:bg-white -:rounded-lg -:shadow-md -:p-4"], props)}>
      <div class="flex items-center">
        <img
          src={props.avatar}
          class="w-10 h-10 rounded-full mr-2"
          alt={props.username}
        />
        <div class="flex flex-col">
          <span class="font-bold">{props.username}</span>
          <span class="text-gray-500 text-sm">{props.abstract}</span>
        </div>
      </div>

      <div class="mt-4">
        {props.information.map((info, index) => (
          <div class="flex items-center mb-2 flex-wrap" key={index}>
            {info.Icon}
            <span class="ml-2">{info.Details}</span>
          </div>
        ))}
      </div>

      <div class="flex justify-center mt-4">
        <ActionGroup class="flex-grow flex justify-center">
          <>
            {!actions && props.actions}
            {actions &&
              actions.map((action, index) => (
                <Action
                  key={index}
                  {...action}
                />
              ))}
          </>
        </ActionGroup>
      </div>

      <div class="mt-4 flex flex-col md:flex-row">
        <MenuButton toggleChildren="…" menuStyle={MenuButtonStyleTypes.Popover}>
          {!actions && props.actions}
          {actions &&
            actions.map((action, index) => <Action key={index} {...action} />)}
        </MenuButton>

        <Action class="ml-2" {...props.primaryAction} />
      </div>
    </div>
  );
}
